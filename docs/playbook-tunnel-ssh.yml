---
- hosts: all
  vars:
    # Definições dos servidores
    servers:
      - hostname: serverA
        public_ip: 203.0.113.10
        private_ip: 10.0.0.1
        ssh_port: 22
        tunnel_user: tunnel_admin

      - hostname: serverB
        public_ip: 203.0.113.20
        private_ip: 10.0.0.2
        ssh_port: 22
        tunnel_user: tunnel_admin

      - hostname: serverC
        public_ip: 203.0.113.30
        private_ip: 10.0.0.3
        ssh_port: 22
        tunnel_user: tunnel_admin

  tasks:
    - name: Instalar pacotes de dependência
      apt:
        name:
          - openssh-server
          - autossh
        state: present
      become: yes

    - name: Criar usuário de túnel em todos os servidores
      user:
        name: "{{ item.tunnel_user }}"
        state: present
        shell: /bin/bash
        createhome: yes
      become: yes
      loop: "{{ servers }}"

    - name: Gerar chaves SSH para usuário de túnel
      community.crypto.openssh_keypair:
        path: "/home/{{ item.tunnel_user }}/.ssh/id_rsa"
        type: rsa
        size: 4096
        state: present
        owner: "{{ item.tunnel_user }}"
        group: "{{ item.tunnel_user }}"
      become: yes
      become_user: "{{ item.tunnel_user }}"
      loop: "{{ servers }}"

    - name: Configurar authorized_keys para todos os servidores
      blockinfile:
        path: "/home/{{ item.0.tunnel_user }}/.ssh/authorized_keys"
        create: yes
        block: "{{ item.1.public_key }}"
        owner: "{{ item.0.tunnel_user }}"
        group: "{{ item.0.tunnel_user }}"
        mode: '0600'
      become: yes
      become_user: "{{ item.0.tunnel_user }}"
      loop: "{{ servers | subelements('servers', skip_missing=True) }}"

    - name: Configurar túneis SSH reversos
      block:
        - name: Túnel de ServerA para ServerB
          shell: >
            autossh -M 0 -f -N \
            -R *:{{ serverB.private_ip }}:22:localhost:22 \
            {{ serverB.tunnel_user }}@{{ serverB.public_ip }}
          become: yes
          become_user: "{{ serverA.tunnel_user }}"

        - name: Túnel de ServerB para ServerC
          shell: >
            autossh -M 0 -f -N \
            -R *:{{ serverC.private_ip }}:22:localhost:22 \
            {{ serverC.tunnel_user }}@{{ serverC.public_ip }}
          become: yes
          become_user: "{{ serverB.tunnel_user }}"

        - name: Túnel de ServerC para ServerA
          shell: >
            autossh -M 0 -f -N \
            -R *:{{ serverA.private_ip }}:22:localhost:22 \
            {{ serverA.tunnel_user }}@{{ serverA.public_ip }}
          become: yes
          become_user: "{{ serverC.tunnel_user }}"

    - name: Configurar SSH config para conexões sem senha
      template:
        src: ssh_config.j2
        dest: "/home/{{ item.tunnel_user }}/.ssh/config"
        owner: "{{ item.tunnel_user }}"
        group: "{{ item.tunnel_user }}"
        mode: '0600'
      become: yes
      loop: "{{ servers }}"

  handlers:
    - name: Reiniciar serviço SSH
      service:
        name: ssh
        state: restarted
      become: yes

# Template para configuração SSH (ssh_config.j2)
# Exemplo de conteúdo:
# Host serverA
#   HostName 203.0.113.10
#   User tunnel_admin
#   IdentityFile ~/.ssh/id_rsa